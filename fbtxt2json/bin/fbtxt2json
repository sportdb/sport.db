#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbtxt2json


## our own code
require 'sportdb/quick'



require 'optparse'



args = ARGV
opts = { debug:  false,
          output: nil,
       }

parser = OptionParser.new do |parser|
parser.banner = "Usage: #{$PROGRAM_NAME} [options] PATH"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?
#    parser.on( "-q", "--quiet",
#                 "less debug output/messages - default is (#{!opts[:debug]})" ) do |debug|
#      opts[:debug] = false
#    end

   parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]})" ) do |debug|
     opts[:debug] = true
   end

   parser.on( "-o PATH", "--output PATH",
                  "output to file" ) do |output|
     opts[:output] = output
   end
end
parser.parse!( args )

puts "OPTS:"
p opts
puts "ARGV:"
p args


paths = if args.empty?
          ['../../../openfootball/euro/2021--europe/euro.txt']
        else
          args
        end


if opts[:debug]
   SportDb::QuickMatchReader.debug = true
   SportDb::MatchParser.debug      = true
else
   SportDb::QuickMatchReader.debug = false
   SportDb::MatchParser.debug      = false
   LogUtils::Logger.root.level = :info
end


## step 1 - concat(enate) all text files into one
txt = String.new
paths.each_with_index do |path,i|
   puts "==> reading [#{i+1}/#{paths.size}] >#{path}<..."
   txt += "\n\n"   if i > 0
   txt += read_text( path )
end

## step 2 - parse (matches) in the football.txt format
quick = SportDb::QuickMatchReader.new( txt )
matches = quick.parse
name    = quick.league_name   ## quick hack - get league+season via league_name

data = { 'name'    => name,
         'matches' => matches.map {|match| match.as_json }}
pp data
puts
puts "  #{matches.size} match(es)"

if quick.errors?
   puts "!! #{quick.errors.size} parse error(s):"
   pp quick.errors
   exit 1
end

if opts[:output]
   puts "==> writing matches to #{opts[:output]}"
   write_json( opts[:output], data )
end

puts "bye"

