#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbt

require 'sportdb/parser'


require 'optparse'

##
## read textfile 
##   and dump tokens
##
##   fbt  ../openfootball/.../euro.txt


  SEASON_RE = %r{ (?:
                       \d{4}-\d{2}
                     | \d{4}(--[a-z0-9_-]+)?
                    )
                  }x
    SEASON = SEASON_RE.source    ## "inline" helper for embedding in other regexes - keep? why? why not?


    ## note: if pattern includes directory add here
    ##     (otherwise move to more "generic" datafile) - why? why not?
    MATCH_RE = %r{ (?: ^|/ )      # beginning (^) or beginning of path (/)
                       #{SEASON}
                     /[a-z0-9_-]+\.txt$  ## txt e.g /1-premierleague.txt
                }x


def find( path, pattern=MATCH_RE )
    datafiles = []

    ## check all txt files
    ## note: incl. files starting with dot (.)) as candidates (normally excluded with just *)
    candidates = Dir.glob( "#{path}/**/{*,.*}.txt" )
    ## pp candidates
    candidates.each do |candidate|
      datafiles << candidate    if pattern.match( candidate )
    end

    ## pp datafiles
    datafiles
 end






 args = ARGV
 opts = { debug: false,
          metal: false }

 parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?


  parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]} )" ) do |debug|
    opts[:debug] = debug
  end

  parser.on( "--metal",
                 "turn off typed parse tree; show to the metal tokens"+
                   " (default: #{opts[:metal]})" ) do |metal|
    opts[:metal] = metal
  end
end
parser.parse!( args )

puts "OPTS:"
p opts
puts "ARGV:"
p args






def expand_args( args )
    paths = []

    args.each do |arg|
        ## check if directory
        if Dir.exist?( arg )
            datafiles = find( arg )
            puts
            puts "  found #{datafiles.size} match txt datafiles in #{arg}"
            pp datafiles
            paths += datafiles
        else
              ## assume it's a file
            paths << arg
        end
    end

    paths
end


paths =  if args.empty?
            [
              '../../../openfootball/euro/2020--europe/euro.txt',
              '../../../openfootball/euro/2024--germany/euro.txt',
            ]
         else
            ## check for directories
            ##   and auto-expand
             
            expand_args( args )
         end



SportDb::Parser::Linter.debug = true    if opts[:debug]

linter = SportDb::Parser::Linter.new



paths.each_with_index do |path,i|
    puts "==> [#{i+1}/#{paths.size}] reading >#{path}<..."
    linter.read( path, parse: !opts[:metal] )
end

if linter.errors?
    puts
    pp linter.errors
    puts "!!   #{linter.errors.size} parse error(s) in #{paths.size} datafiles(s)"
else
    puts "OK   no parse errors found in #{paths.size} datafile(s)"
end

puts "bye"

