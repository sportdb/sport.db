#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbt

## our own code
require 'sportdb/parser'



require 'optparse'

##
## read textfile 
##   and dump tokens
##
##   fbt  ../openfootball/.../euro.txt




 args = ARGV
 opts = { debug: false,
          metal: false }

 parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?


  parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]} )" ) do |debug|
    opts[:debug] = debug
  end

  parser.on( "--metal",
                 "turn off typed parse tree; show to the metal tokens"+
                   " (default: #{opts[:metal]})" ) do |metal|
    opts[:metal] = metal
  end
end
parser.parse!( args )

puts "OPTS:"
p opts
puts "ARGV:"
p args








paths =  if args.empty?
            [
              '../../../openfootball/euro/2020--europe/euro.txt',
              '../../../openfootball/euro/2024--germany/euro.txt',
            ]
         else
            ## check for directories
            ##   and auto-expand
             
            SportDb::Parser::Opts.expand_args( args )
         end



SportDb::Parser::Linter.debug = true    if opts[:debug]

linter = SportDb::Parser::Linter.new

errors = []

paths.each_with_index do |path,i|
    puts "==> [#{i+1}/#{paths.size}] reading >#{path}<..."
    linter.read( path, parse: !opts[:metal] )

    errors += linter.errors    if linter.errors?
end

if errors.size > 0
    puts
    pp errors
    puts "!!   #{errors.size} parse error(s) in #{paths.size} datafiles(s)"
else
    puts "OK   no parse errors found in #{paths.size} datafile(s)"
end

puts "bye"

