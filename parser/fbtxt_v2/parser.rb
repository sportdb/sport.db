#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
class RaccMatchParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    13,    14,    32,    54,    29,    29,   128,    95,    26,    18,
    88,    62,    33,    15,    37,   -51,    16,    17,    42,    19,
    21,    25,    26,    13,    14,    32,    82,    29,   127,    40,
    31,    31,    18,    89,    90,   108,    15,    38,   -51,    16,
    17,    39,    19,    21,    25,    26,    83,    85,   109,    41,
    44,    71,    52,    31,    72,    45,    48,    47,    64,    66,
    67,    57,    31,    76,    77,    97,    98,   106,   107,   125,
   126,    55,    59,    62,    63,    74,    78,    79,    80,    86,
    41,    31,    92,    31,    37,   100,   101,    71,   103,   110,
   111,   112,   113,    52,    85,   118,   119,   120,    31,    31,
    62,    37,   123,   124,   129,    52,   131 ]

racc_action_check = [
     0,     0,     0,    23,     0,    18,   117,    60,    23,     0,
    52,    60,     1,     0,    14,     0,     0,     0,    18,     0,
     0,     0,     0,     2,     2,     2,    49,     2,   117,    17,
     0,    18,     2,    52,    52,    73,     2,    15,     2,     2,
     2,    16,     2,     2,     2,     2,    49,    49,    73,    17,
    19,    37,    22,     2,    37,    20,    20,    20,    35,    35,
    35,    28,    28,    39,    39,    62,    62,    72,    72,   114,
   114,    27,    29,    31,    33,    38,    42,    43,    46,    51,
    54,    56,    57,    59,    65,    66,    67,    69,    71,    75,
    78,    79,    81,    82,    83,    85,    87,    90,    91,    93,
    95,   103,   104,   105,   122,   126,   128 ]

racc_action_pointer = [
    -1,    12,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     8,    22,    26,    26,     0,    47,
    52,   nil,    36,   -15,   nil,   nil,   nil,    68,    31,    42,
   nil,    65,   nil,    74,   nil,    55,   nil,    44,    59,    45,
   nil,   nil,    65,    66,   nil,   nil,    57,   nil,   nil,    22,
   nil,    50,     5,   nil,    57,   nil,    50,    79,   nil,    52,
     3,   nil,    33,   nil,   nil,    78,    82,    83,   nil,    80,
   nil,    80,    55,    32,   nil,    86,   nil,   nil,    87,    88,
   nil,    89,    77,    69,   nil,    68,   nil,    80,   nil,   nil,
    81,    67,   nil,    68,   nil,    92,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    95,    91,    95,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    66,   nil,   nil,     2,   nil,   nil,
   nil,   nil,    95,   nil,   nil,   nil,    89,   nil,    79,   nil,
   nil,   nil ]

racc_action_default = [
    -1,   -92,    -2,    -3,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -92,   -92,   -92,   -56,   -92,   -92,
   -92,   -43,   -92,   -52,   -54,   -55,   -58,   -92,   -76,   -92,
   -81,   -92,   -91,   -92,    -4,   -92,   -16,   -23,   -92,   -92,
   -39,   -57,   -92,   -92,   -41,   -42,   -92,   -45,   -46,   -59,
   -67,   -68,   -92,   -53,   -56,   -75,   -92,   -79,   -82,   -92,
   -83,   -84,   -88,   132,   -15,   -92,   -18,   -20,   -22,   -24,
   -26,   -92,   -92,   -92,   -34,   -92,   -37,   -38,   -92,   -92,
   -44,   -92,   -92,   -60,   -62,   -92,   -73,   -92,   -70,   -71,
   -92,   -78,   -80,   -77,   -85,   -92,   -87,   -89,   -90,   -17,
   -19,   -21,   -25,   -92,   -92,   -29,   -31,   -32,   -33,   -35,
   -36,   -40,   -74,   -47,   -92,   -49,   -61,   -63,   -65,   -69,
   -72,   -86,   -92,   -28,   -30,   -48,   -92,   -64,   -92,   -27,
   -50,   -66 ]

racc_goto_table = [
    49,    36,    58,    84,    61,    91,    70,     3,    93,    34,
     1,     2,    35,    65,    68,    69,   104,   105,    73,    75,
    46,    81,   114,    53,   117,    87,    43,    56,    60,    96,
   nil,   nil,   nil,    94,   nil,   nil,   nil,   116,   102,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    99,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   115,   nil,   nil,   nil,   nil,    58,   nil,    58,   121,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   122,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   130 ]

racc_goto_check = [
    26,    14,    39,    31,    41,    37,    18,     3,    37,     3,
     1,     2,    13,    15,    16,    17,    19,    20,    21,    22,
    24,    27,    28,    30,    32,    35,    36,    38,    40,    42,
   nil,   nil,   nil,    41,   nil,   nil,   nil,    31,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,    39,   nil,    39,    41,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    10,    11,     7,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    -2,   -13,   -22,   -23,   -22,   -31,   -56,
   -55,   -20,   -20,   nil,     0,   nil,   -22,   -28,   -60,   nil,
     0,   -46,   -61,   nil,   nil,   -27,     8,   -51,    -1,   -26,
    -3,   -27,   -33 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     7,     8,     9,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    20,   nil,    22,   nil,   nil,   nil,    23,
    24,   nil,   nil,    50,    51,   nil,    27,    28,   nil,    30,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 36, :_reduce_none,
  2, 36, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_14,
  3, 46, :_reduce_15,
  1, 47, :_reduce_16,
  3, 47, :_reduce_17,
  1, 49, :_reduce_none,
  2, 49, :_reduce_19,
  1, 49, :_reduce_none,
  2, 49, :_reduce_21,
  2, 48, :_reduce_22,
  0, 50, :_reduce_23,
  1, 50, :_reduce_24,
  2, 50, :_reduce_25,
  1, 50, :_reduce_26,
  4, 52, :_reduce_27,
  3, 51, :_reduce_28,
  1, 53, :_reduce_29,
  2, 53, :_reduce_30,
  1, 54, :_reduce_none,
  1, 54, :_reduce_none,
  4, 41, :_reduce_33,
  1, 55, :_reduce_34,
  2, 55, :_reduce_35,
  4, 42, :_reduce_36,
  1, 56, :_reduce_37,
  1, 56, :_reduce_38,
  2, 38, :_reduce_39,
  4, 38, :_reduce_40,
  2, 39, :_reduce_41,
  2, 40, :_reduce_42,
  1, 57, :_reduce_43,
  3, 57, :_reduce_44,
  1, 58, :_reduce_none,
  1, 58, :_reduce_none,
  4, 43, :_reduce_47,
  5, 43, :_reduce_48,
  1, 62, :_reduce_49,
  3, 62, :_reduce_50,
  0, 59, :_reduce_none,
  1, 59, :_reduce_none,
  2, 59, :_reduce_53,
  1, 59, :_reduce_none,
  1, 63, :_reduce_55,
  1, 64, :_reduce_56,
  2, 64, :_reduce_57,
  1, 64, :_reduce_58,
  0, 61, :_reduce_59,
  1, 61, :_reduce_60,
  2, 61, :_reduce_61,
  1, 61, :_reduce_62,
  2, 65, :_reduce_63,
  3, 65, :_reduce_64,
  1, 66, :_reduce_65,
  3, 66, :_reduce_66,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  3, 68, :_reduce_69,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  3, 67, :_reduce_72,
  2, 67, :_reduce_73,
  4, 44, :_reduce_74,
  2, 44, :_reduce_75,
  1, 70, :_reduce_76,
  3, 70, :_reduce_77,
  3, 70, :_reduce_78,
  1, 72, :_reduce_none,
  2, 72, :_reduce_none,
  1, 71, :_reduce_81,
  2, 71, :_reduce_82,
  2, 73, :_reduce_83,
  1, 74, :_reduce_84,
  2, 74, :_reduce_85,
  3, 74, :_reduce_86,
  2, 75, :_reduce_87,
  0, 76, :_reduce_88,
  1, 76, :_reduce_89,
  1, 76, :_reduce_90,
  1, 45, :_reduce_91 ]

racc_reduce_n = 92

racc_shift_n = 132

racc_token_table = {
  false => 0,
  :error => 1,
  :PROP => 2,
  :NEWLINE => 3,
  "," => 4,
  "-" => 5,
  :PROP_NAME => 6,
  "(" => 7,
  :MINUTE => 8,
  ")" => 9,
  "[" => 10,
  "]" => 11,
  :YELLOW_CARD => 12,
  :RED_CARD => 13,
  :GROUP_DEF => 14,
  "|" => 15,
  :TEAM => 16,
  :ROUND_DEF => 17,
  :DATE => 18,
  :DURATION => 19,
  :GROUP => 20,
  :ROUND => 21,
  :ORD => 22,
  :TIME => 23,
  :STATUS => 24,
  "@" => 25,
  :TIMEZONE => 26,
  :TEXT => 27,
  :VS => 28,
  :SCORE => 29,
  ";" => 30,
  :PLAYER => 31,
  :OG => 32,
  :PEN => 33 }

racc_nt_base = 34

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "PROP",
  "NEWLINE",
  "\",\"",
  "\"-\"",
  "PROP_NAME",
  "\"(\"",
  "MINUTE",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "YELLOW_CARD",
  "RED_CARD",
  "GROUP_DEF",
  "\"|\"",
  "TEAM",
  "ROUND_DEF",
  "DATE",
  "DURATION",
  "GROUP",
  "ROUND",
  "ORD",
  "TIME",
  "STATUS",
  "\"@\"",
  "TIMEZONE",
  "TEXT",
  "VS",
  "SCORE",
  "\";\"",
  "PLAYER",
  "OG",
  "PEN",
  "$start",
  "document",
  "elements",
  "element",
  "date_header",
  "group_header",
  "round_header",
  "group_def",
  "round_def",
  "match_line",
  "goal_lines",
  "empty_line",
  "lineup_lines",
  "lineup",
  "lineup_name",
  "lineup_sep",
  "lineup_name_opts",
  "card",
  "lineup_sub",
  "card_body",
  "card_type",
  "team_values",
  "round_date",
  "round_values",
  "round_sep",
  "match_opts",
  "match",
  "more_match_opts",
  "more_matches",
  "ord",
  "date",
  "geo",
  "geo_values",
  "match_result",
  "match_fixture",
  "match_sep",
  "goal_lines_body",
  "goals",
  "goal_sep",
  "goal",
  "goal_minutes",
  "goal_minute",
  "goal_minute_opts" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_14(val, _values, result)
     puts "!! skipping invalid content (trying to recover from parse error):"
                pp val[0] 
                @errors << "parser error (recover) - skipping #{val[0].pretty_inspect}"

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_15(val, _values, result)
      @tree << LineupLine.new( team:    val[0],
                                                    lineup:  val[1]
                                                  ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_16(val, _values, result)
     result = [[val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_17(val, _values, result)
                           ## if lineup_sep is -  start a new sub array!!
                       if val[1] == '-'
                          result << [val[2]]
                       else
                          result[-1] << val[2]
                       end

    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_19(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_21(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_22(val, _values, result)
                                  kwargs = { name: val[0] }.merge( val[1] )
                              result = Lineup.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_23(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_24(val, _values, result)
                                  result = { card: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_25(val, _values, result)
                                  result = { card: val[0], sub: val[1] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_26(val, _values, result)
                                  result = { sub: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 106)
  def _reduce_27(val, _values, result)
                                  result = Sub.new( minute: Minute.new(val[1][1]), 
                                                sub:    val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_28(val, _values, result)
                                  kwargs = val[1]
                              result = Card.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_29(val, _values, result)
     result = { name: val[0] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_30(val, _values, result)
     result = { name: val[0], minute: Minute.new(val[1][1]) }
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_33(val, _values, result)
                          @tree << GroupDef.new( name:  val[0],
                                             teams: val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 141)
  def _reduce_34(val, _values, result)
                                                   result = val
                                               ## e.g. val is ["Austria"] 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_35(val, _values, result)
                                                   result.push( val[1] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_36(val, _values, result)
                          kwargs = { name: val[0] }.merge( val[2] )
                      @tree<< RoundDef.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_37(val, _values, result)
     result = { date: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_38(val, _values, result)
     result = { duration: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_39(val, _values, result)
                         @tree <<  DateHeader.new( date: val[0][1] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_40(val, _values, result)
                         @tree <<  DateHeader.new( date: val[1][1] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_41(val, _values, result)
                         @tree <<  GroupHeader.new( name: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_42(val, _values, result)
                         @tree <<  RoundHeader.new( names: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_43(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_44(val, _values, result)
       result.push( val[2] )
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_47(val, _values, result)
                           kwargs = {}.merge( val[0], val[1], val[2] )
                       @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_48(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )
                     
                      ## add more match fixtures
                      val[3].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 223)
  def _reduce_49(val, _values, result)
                                        trace( "REDUCE => more_matches : match" ) 
                                    result = val

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_50(val, _values, result)
                                         trace( "REDUCE => more_matches : more_matches ',' match" ) 
                                     result.push( val[2] )

    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_53(val, _values, result)
     result = {}.merge( val[0], val[1] )
    result
  end
.,.,

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_55(val, _values, result)
      result = { ord: val[0][1][:value] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 241)
  def _reduce_56(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_57(val, _values, result)
       result = { date: val[0][1], time: val[1][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 243)
  def _reduce_58(val, _values, result)
       result = { time: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 247)
  def _reduce_59(val, _values, result)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 250)
  def _reduce_60(val, _values, result)
                          ## todo - add possible status_notes too!!! 
                      result = { status: val[0][1][:status] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_61(val, _values, result)
                         result = { status: val[0][1][:status] }.merge( val[1] ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 257)
  def _reduce_62(val, _values, result)
     result = {}.merge( val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_63(val, _values, result)
     result = { geo: val[1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_64(val, _values, result)
     result = { geo: val[1], timezone: val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_65(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 268)
  def _reduce_66(val, _values, result)
      result.push( val[2] )
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_69(val, _values, result)
                                   trace( "RECUDE match_fixture" )
                               result = { team1: val[0],
                                          team2: val[2] }   

    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.y', 287)
  def _reduce_72(val, _values, result)
                               trace( "REDUCE => match_result : TEXT  SCORE  TEXT" )
                           result = { team1: val[0],
                                      team2: val[2],
                                      score: val[1][1]
                                    }   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_73(val, _values, result)
                              trace( "REDUCE  => match_result : match_fixture SCORE" )
                          result = { score: val[1][1] }.merge( val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_74(val, _values, result)
                           kwargs = val[1]
                       @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_75(val, _values, result)
                             kwargs = val[0]
                         @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_76(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: [] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_77(val, _values, result)
      result = { goals1: [],
                                                              goals2: val[2] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_78(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: val[2] }

    result
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.y', 344)
  def _reduce_81(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 345)
  def _reduce_82(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 361)
  def _reduce_83(val, _values, result)
                      result = Goal.new( player:  val[0],
                                     minutes: val[1] )   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 373)
  def _reduce_84(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_85(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_86(val, _values, result)
     result.push( val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_87(val, _values, result)
                            kwargs = { }.merge( val[0][1] ).merge( val[1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_88(val, _values, result)
     result = { }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_89(val, _values, result)
      result = { og: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_90(val, _values, result)
      result = { pen: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 392)
  def _reduce_91(val, _values, result)
     trace( "REDUCE empty_line" )
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RaccMatchParser
