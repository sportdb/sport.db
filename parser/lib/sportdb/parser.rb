## pulls in
require 'cocos'


####
# try a (simple) tokenizer/parser with regex

## note - match line-by-line
#            avoid massive backtracking by definition
#             that is, making it impossible

## sym(bols) -
##  text - change text to name - why? why not?


require_relative 'parser/version'

require_relative 'parser/lang'

require_relative 'parser/token-score'
require_relative 'parser/token-date'
require_relative 'parser/token-text'
require_relative 'parser/token-status'
require_relative 'parser/token'
require_relative 'parser/lexer'

require_relative 'parser/parser'   ## auto-generated by racc (from parser.y)
require_relative 'parser/racc_parser'
require_relative 'parser/racc_tree'



###
#  make parser api (easily) available - why? why not?

=begin
module SportDb
   def self.parser() @@parser ||= Parser.new; end
   def self.parse( ... )
   end
   def self.tokenize( ... )
   end
end  # module SportDb
=end



module SportDb
class Parser
####################
#  "default" lexer & parser  (wraps RaccMatchParser)

  def tokenize_with_errors( lines, debug: false )
     lexer = Lexer.new( lines )  
     tokens, errors = lexer.tokenize_with_errors
     [tokens, errors]
  end

  ### convience helper - ignore errors by default
  def tokenize( lines, debug: false )
    tokens, _ = tokenize_with_errors( lines, debug: debug )
    tokens
  end


  def parse_with_errors( lines, debug: false )
    ## todo/check - if lines needs to chack for array of lines and such
    ##                        or handled by tokenizer???
    parser = RaccMatchParser.new( lines )
    tree, errors = parser.parse_with_errors
    [tree, errors]
  end

  ### convience helper - ignore errors by default
  def parse( lines, debug: false )
    tree, _ = parse_with_errors( lines, debug: debug )
    tree
  end
end  # class Parser
end  # module SportDb



puts SportDb::Module::Parser.banner    # say hello

