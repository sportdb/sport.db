## pulls in
require 'cocos'


####
# try a (simple) tokenizer/parser with regex

## note - match line-by-line
#            avoid massive backtracking by definition
#             that is, making it impossible

## sym(bols) -
##  text - change text to name - why? why not?


require_relative 'parser/version'

require_relative 'parser/lang'

require_relative 'parser/token-score'
require_relative 'parser/token-date'
require_relative 'parser/token-text'
require_relative 'parser/token-status'
require_relative 'parser/token'
require_relative 'parser/tokenizer'

require_relative 'parser/parser'   ## auto-generated by racc (from parser.y)
require_relative 'parser/racc_parser'
require_relative 'parser/racc_tree'



###
#  make parser api (easily) available - why? why not?

=begin
module SportDb
   def self.parser() @@parser ||= Parser.new; end
   def self.parse( ... )
   end
   def self.tokenize( ... )
   end
end  # module SportDb
=end



module SportDb
###
##  todo/fix -   use LangHelper or such
##   e.g.     class Parser
##                include LangHelper
##            end
class Parser
  ## keep "old" access to checking for group, round & friends
  ##    for now for compatibility
  def is_group?( text )  Lang.is_group?( text ); end
  def is_round?( text )  Lang.is_round?( text ); end
  def is_leg?( text )    Lang.is_leg?( text ); end
end
end  # module SportDb



puts SportDb::Module::Parser.banner    # say hello

