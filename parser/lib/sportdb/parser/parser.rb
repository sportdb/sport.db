#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
class RaccMatchParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    13,    14,    35,    38,   107,    35,   132,   -63,   138,    70,
    18,    52,    75,    37,    15,    48,    32,    16,    20,   133,
    28,    21,    23,    39,    26,    29,    13,    14,    51,    38,
    37,    35,   137,    37,    71,    72,    18,    64,    61,    43,
    15,   117,    32,    16,    20,    80,    28,    21,    23,    44,
    26,    29,    64,   104,    54,    57,    56,    94,    95,    37,
    62,    51,    66,    82,    28,    84,    85,    89,    45,    29,
    90,    43,    46,   127,    58,    62,    51,   101,   102,   119,
   120,   130,   131,   141,   142,   150,   142,    51,    53,    32,
    67,    68,    73,    77,    80,    81,    92,    96,    97,    98,
   100,   -64,    32,   109,   110,   111,   112,    37,   114,    37,
   121,    43,   123,   124,    89,   134,   135,   136,   139,    32,
   143,    37,    37,    80,   145,    43,   147,   148,   149,    32,
   152,   153 ]

racc_action_check = [
     0,     0,    18,     0,    62,     0,    91,    20,    99,    32,
     0,    20,    34,    34,     0,    18,     0,     0,     0,    91,
     0,     0,     0,     1,     0,     0,     2,     2,    62,     2,
    18,     2,    99,     0,    32,    32,     2,    25,    25,    14,
     2,    78,     2,     2,     2,    78,     2,     2,     2,    15,
     2,     2,    59,    59,    22,    22,    22,    45,    45,     2,
    25,    25,    26,    41,    26,    41,    41,    43,    16,    26,
    43,    89,    17,    89,    22,    59,    59,    55,    55,    80,
    80,    90,    90,   105,   105,   140,   140,    19,    21,    24,
    29,    31,    33,    35,    37,    39,    44,    47,    48,    49,
    51,    52,    61,    63,    66,    69,    72,    74,    75,    77,
    82,    83,    84,    85,    87,    93,    96,    98,   101,   104,
   108,   113,   115,   117,   126,   127,   128,   129,   138,   142,
   145,   146 ]

racc_action_pointer = [
    -1,    23,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,    33,    52,    68,    -4,    59,
   -10,    84,    50,   nil,    72,    33,    43,   nil,   nil,    69,
   nil,    59,     3,    88,   -21,    60,   nil,    85,   nil,    95,
   nil,    60,   nil,    59,    79,    38,   nil,    85,    77,    87,
   nil,    70,    84,   nil,   nil,    55,   nil,   nil,   nil,    48,
   nil,    85,     0,    99,   nil,   nil,    83,   nil,   nil,    88,
   nil,   nil,    89,   nil,    73,   104,   nil,    75,    36,   nil,
    44,   nil,   106,   104,   108,   109,   nil,   106,   nil,    64,
    68,     2,   nil,   111,   nil,   nil,   112,   nil,   113,     3,
   nil,   114,   nil,   nil,   102,    79,   nil,   nil,   116,   nil,
   nil,   nil,   nil,    87,   nil,    88,   nil,   114,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   115,   118,   114,   118,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    98,   nil,
    81,   nil,   112,   nil,   nil,   120,   121,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -101,    -2,    -3,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,  -101,  -101,  -101,  -101,  -101,   -42,
   -44,  -101,  -101,   -49,  -101,  -101,   -60,   -62,   -65,   -66,
   -76,   -77,  -101,  -101,   -85,  -101,   -90,  -101,  -100,  -101,
    -4,  -101,   -16,   -23,  -101,  -101,   -40,  -101,   -44,  -101,
   -43,  -101,   -45,   -46,   -47,  -101,   -51,   -52,   -53,  -101,
   -55,  -101,  -101,  -101,   -71,   -61,   -63,   -67,   -82,  -101,
   -79,   -80,  -101,   -84,  -101,   -88,   -91,  -101,   -92,   -93,
   -96,   154,  -101,  -101,   -18,   -20,   -22,   -24,   -26,  -101,
  -101,  -101,   -35,  -101,   -38,   -39,  -101,   -45,  -101,   -72,
   -74,  -101,   -50,   -54,  -101,  -101,   -58,   -68,  -101,   -70,
   -64,   -78,   -81,   -87,   -89,   -86,   -94,  -101,   -97,   -98,
   -99,   -15,   -17,   -19,   -21,   -25,  -101,  -101,  -101,   -30,
   -32,   -33,   -34,   -36,   -37,   -41,   -83,   -73,  -101,   -48,
  -101,   -57,  -101,   -69,   -95,  -101,  -101,   -29,   -31,   -75,
   -56,   -59,   -27,   -28 ]

racc_goto_table = [
    59,    42,    76,    88,    79,    50,   105,    60,   113,     1,
     3,   115,    40,     2,    41,    83,    86,    87,   128,   129,
    91,    93,    47,    55,    65,    99,    69,    49,    74,    78,
   118,   nil,   nil,   nil,   nil,   nil,   nil,   106,   nil,   nil,
   nil,   103,   nil,   nil,   nil,   116,   nil,   125,   108,   140,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   122,   nil,   nil,   nil,   nil,   nil,   126,   nil,   nil,   nil,
   106,    76,   nil,    76,   144,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   146,   nil,   nil,   nil,   151 ]

racc_goto_check = [
    29,    14,    40,    18,    42,    25,    31,    30,    38,     1,
     3,    38,     3,     2,    13,    15,    16,    17,    19,    20,
    21,    22,    23,    27,    32,    33,    36,    37,    39,    41,
    43,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,
   nil,    30,   nil,   nil,   nil,    42,   nil,    18,    25,    31,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,   nil,   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,
    29,    40,   nil,    40,    42,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    14,   nil,   nil,   nil,    29 ]

racc_goto_pointer = [
   nil,     9,    13,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     0,   -13,   -26,   -27,   -26,   -40,   -72,
   -71,   -24,   -24,     4,   nil,   -14,   nil,     1,   nil,   -24,
   -18,   -55,    -2,   -26,   nil,   nil,    -6,     9,   -66,    -6,
   -32,    -8,   -33,   -50 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     7,     8,     9,
    10,    11,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    17,    19,    63,    22,   nil,    24,    25,
   nil,   nil,    27,   nil,    30,    31,   nil,    33,    34,   nil,
    36,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 39, :_reduce_none,
  2, 39, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_14,
  4, 49, :_reduce_15,
  1, 50, :_reduce_16,
  3, 50, :_reduce_17,
  1, 52, :_reduce_none,
  2, 52, :_reduce_19,
  1, 52, :_reduce_none,
  2, 52, :_reduce_21,
  2, 51, :_reduce_22,
  0, 53, :_reduce_23,
  1, 53, :_reduce_24,
  2, 53, :_reduce_25,
  1, 53, :_reduce_26,
  4, 55, :_reduce_27,
  4, 55, :_reduce_28,
  3, 54, :_reduce_29,
  1, 56, :_reduce_30,
  2, 56, :_reduce_31,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  4, 44, :_reduce_34,
  1, 58, :_reduce_35,
  2, 58, :_reduce_36,
  4, 45, :_reduce_37,
  1, 59, :_reduce_38,
  1, 59, :_reduce_39,
  2, 41, :_reduce_40,
  4, 41, :_reduce_41,
  1, 60, :_reduce_none,
  2, 60, :_reduce_43,
  1, 61, :_reduce_44,
  2, 61, :_reduce_45,
  2, 42, :_reduce_46,
  2, 43, :_reduce_47,
  4, 43, :_reduce_48,
  1, 63, :_reduce_49,
  3, 63, :_reduce_50,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  1, 64, :_reduce_none,
  3, 46, :_reduce_54,
  2, 46, :_reduce_55,
  5, 46, :_reduce_56,
  4, 46, :_reduce_57,
  1, 68, :_reduce_58,
  3, 68, :_reduce_59,
  1, 65, :_reduce_60,
  2, 65, :_reduce_61,
  1, 65, :_reduce_none,
  1, 69, :_reduce_63,
  2, 69, :_reduce_64,
  1, 69, :_reduce_65,
  1, 69, :_reduce_66,
  2, 69, :_reduce_67,
  2, 67, :_reduce_68,
  3, 67, :_reduce_69,
  2, 67, :_reduce_70,
  1, 67, :_reduce_71,
  2, 62, :_reduce_72,
  3, 62, :_reduce_73,
  1, 70, :_reduce_74,
  3, 70, :_reduce_75,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  3, 72, :_reduce_78,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 71, :_reduce_81,
  2, 71, :_reduce_82,
  4, 47, :_reduce_83,
  2, 47, :_reduce_84,
  1, 74, :_reduce_85,
  3, 74, :_reduce_86,
  3, 74, :_reduce_87,
  1, 76, :_reduce_none,
  2, 76, :_reduce_none,
  1, 75, :_reduce_90,
  2, 75, :_reduce_91,
  2, 77, :_reduce_92,
  1, 78, :_reduce_93,
  2, 78, :_reduce_94,
  3, 78, :_reduce_95,
  1, 79, :_reduce_96,
  2, 79, :_reduce_97,
  1, 80, :_reduce_98,
  1, 80, :_reduce_99,
  1, 48, :_reduce_100 ]

racc_reduce_n = 101

racc_shift_n = 154

racc_token_table = {
  false => 0,
  :error => 1,
  :PROP => 2,
  :PROP_END => 3,
  :NEWLINE => 4,
  "," => 5,
  "-" => 6,
  :PROP_NAME => 7,
  "(" => 8,
  :MINUTE => 9,
  ")" => 10,
  "[" => 11,
  "]" => 12,
  :YELLOW_CARD => 13,
  :RED_CARD => 14,
  :GROUP_DEF => 15,
  "|" => 16,
  :TEAM => 17,
  :ROUND_DEF => 18,
  :DATE => 19,
  :DURATION => 20,
  :TIME => 21,
  :GROUP => 22,
  :ROUND => 23,
  "/" => 24,
  :ORD => 25,
  :WDAY => 26,
  :STATUS => 27,
  "@" => 28,
  :TIMEZONE => 29,
  :TEXT => 30,
  :VS => 31,
  :SCORE => 32,
  ";" => 33,
  :PLAYER => 34,
  :OG => 35,
  :PEN => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "PROP",
  "PROP_END",
  "NEWLINE",
  "\",\"",
  "\"-\"",
  "PROP_NAME",
  "\"(\"",
  "MINUTE",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "YELLOW_CARD",
  "RED_CARD",
  "GROUP_DEF",
  "\"|\"",
  "TEAM",
  "ROUND_DEF",
  "DATE",
  "DURATION",
  "TIME",
  "GROUP",
  "ROUND",
  "\"/\"",
  "ORD",
  "WDAY",
  "STATUS",
  "\"@\"",
  "TIMEZONE",
  "TEXT",
  "VS",
  "SCORE",
  "\";\"",
  "PLAYER",
  "OG",
  "PEN",
  "$start",
  "document",
  "elements",
  "element",
  "date_header",
  "group_header",
  "round_header",
  "group_def",
  "round_def",
  "match_line",
  "goal_lines",
  "empty_line",
  "lineup_lines",
  "lineup",
  "lineup_name",
  "lineup_sep",
  "lineup_name_opts",
  "card",
  "lineup_sub",
  "card_body",
  "card_type",
  "team_values",
  "round_date_opts",
  "date_header_body",
  "date_header_date",
  "geo_opts",
  "round_values",
  "round_sep",
  "match_opts",
  "match",
  "more_match_opts",
  "more_matches",
  "date_opts",
  "geo_values",
  "match_result",
  "match_fixture",
  "match_sep",
  "goal_lines_body",
  "goals",
  "goal_sep",
  "goal",
  "minutes",
  "minute",
  "minute_opts" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_14(val, _values, result)
     puts "!! skipping invalid content (trying to recover from parse error):"
                pp val[0] 
                @errors << "parser error (recover) - skipping #{val[0].pretty_inspect}"

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_15(val, _values, result)
      @tree << LineupLine.new( team:    val[0],
                                                    lineup:  val[1]
                                                  ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_16(val, _values, result)
     result = [[val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_17(val, _values, result)
                           ## if lineup_sep is -  start a new sub array!!
                       if val[1] == '-'
                          result << [val[2]]
                       else
                          result[-1] << val[2]
                       end

    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_19(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_21(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_22(val, _values, result)
                                  kwargs = { name: val[0] }.merge( val[1] )
                              result = Lineup.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_23(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
                                  result = { card: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_25(val, _values, result)
                                  result = { card: val[0], sub: val[1] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_26(val, _values, result)
                                  result = { sub: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_27(val, _values, result)
                                  result = Sub.new( sub:    val[1],
                                                minute: Minute.new(val[2][1]) 
                                              )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_28(val, _values, result)
                                  result = Sub.new( sub:    val[2],
                                                minute: Minute.new(val[1][1]) 
                                              )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_29(val, _values, result)
                                  kwargs = val[1]
                              result = Card.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_30(val, _values, result)
     result = { name: val[0] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_31(val, _values, result)
     result = { name: val[0],
                                        minute: Minute.new(val[1][1]) } 

    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_34(val, _values, result)
                          @tree << GroupDef.new( name:  val[0],
                                             teams: val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_35(val, _values, result)
                                                   result = val
                                               ## e.g. val is ["Austria"] 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 141)
  def _reduce_36(val, _values, result)
                                                   result.push( val[1] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_37(val, _values, result)
                          kwargs = { name: val[0] }.merge( val[2] )
                      @tree<< RoundDef.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_38(val, _values, result)
     result = { date: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_39(val, _values, result)
     result = { duration: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_40(val, _values, result)
                         kwargs = {}.merge( val[0] )
                     @tree <<  DateHeader.new( **kwargs )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_41(val, _values, result)
                         kwargs = {}.merge( val[1] )
                     @tree <<  DateHeader.new( **kwargs )  

    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_43(val, _values, result)
      result = {}.merge( val[0], val[1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_44(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_45(val, _values, result)
       result = { date: val[0][1], time: val[1][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_46(val, _values, result)
                         @tree <<  GroupHeader.new( name: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 195)
  def _reduce_47(val, _values, result)
                         @tree <<  RoundHeader.new( names: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_48(val, _values, result)
                        @tree <<  RoundHeader.new( names: val[0], group: val[2] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_49(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_50(val, _values, result)
       result.push( val[2] )
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_54(val, _values, result)
                           kwargs = {}.merge( val[0], val[1], val[2] )
                       @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_55(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 226)
  def _reduce_56(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )
                     
                      ## add more match fixtures
                      val[3].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_57(val, _values, result)
                          kwargs = val[0]
                      @tree << MatchLine.new( **kwargs )
 
                      ## add more match fixtures
                      val[2].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 250)
  def _reduce_58(val, _values, result)
                                        trace( "REDUCE => more_matches : match" ) 
                                    result = val

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_59(val, _values, result)
                                         trace( "REDUCE => more_matches : more_matches ',' match" ) 
                                     result.push( val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_60(val, _values, result)
       result = { ord: val[0][1][:value] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_61(val, _values, result)
       result = { ord: val[0][1][:value] }.merge( val[1] )
    result
  end
.,.,

# reduce 62 omitted

module_eval(<<'.,.,', 'parser.y', 266)
  def _reduce_63(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_64(val, _values, result)
       result = { date: val[0][1], time: val[1][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 268)
  def _reduce_65(val, _values, result)
       result = { time: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 269)
  def _reduce_66(val, _values, result)
       result = { wday: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 270)
  def _reduce_67(val, _values, result)
       result = { wday: val[0][1], time: val[1][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_68(val, _values, result)
                          ## todo - add possible status_notes too!!! 
                      result = { status: val[0][1][:status] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_69(val, _values, result)
                         result = { status: val[0][1][:status] }.merge( val[1] ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 283)
  def _reduce_70(val, _values, result)
     result = {}.merge( val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 284)
  def _reduce_71(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_72(val, _values, result)
     result = { geo: val[1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_73(val, _values, result)
     result = { geo: val[1], timezone: val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_74(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_75(val, _values, result)
      result.push( val[2] )
    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_78(val, _values, result)
                                   trace( "RECUDE match_fixture" )
                               result = { team1: val[0],
                                          team2: val[2] }   

    result
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_81(val, _values, result)
                               trace( "REDUCE => match_result : TEXT  SCORE  TEXT" )
                           result = { team1: val[0],
                                      team2: val[2],
                                      score: val[1][1]
                                    }   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 322)
  def _reduce_82(val, _values, result)
                              trace( "REDUCE  => match_result : match_fixture SCORE" )
                          result = { score: val[1][1] }.merge( val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_83(val, _values, result)
                           kwargs = val[1]
                       @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 346)
  def _reduce_84(val, _values, result)
                             kwargs = val[0]
                         @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_85(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: [] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 354)
  def _reduce_86(val, _values, result)
      result = { goals1: [],
                                                              goals2: val[2] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 357)
  def _reduce_87(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: val[2] }

    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.y', 371)
  def _reduce_90(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_91(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_92(val, _values, result)
                      result = Goal.new( player:  val[0],
                                     minutes: val[1] )   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 400)
  def _reduce_93(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_94(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_95(val, _values, result)
     result.push( val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 408)
  def _reduce_96(val, _values, result)
                            kwargs = {}.merge( val[0][1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 413)
  def _reduce_97(val, _values, result)
                            kwargs = { }.merge( val[0][1] ).merge( val[1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_98(val, _values, result)
      result = { og: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 418)
  def _reduce_99(val, _values, result)
      result = { pen: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 423)
  def _reduce_100(val, _values, result)
     trace( "REDUCE empty_line" )
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RaccMatchParser
