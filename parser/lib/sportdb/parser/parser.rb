#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
class RaccMatchParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    15,    12,    16,   163,    84,   126,   157,    42,    17,    45,
    74,   109,    75,    72,   110,    21,    81,    32,    33,    18,
    69,    36,    19,    23,   158,    24,    25,   162,    27,    30,
    32,    33,    15,    12,    16,    59,    39,    39,    44,    42,
    17,    47,    70,    59,    82,    77,    78,    21,    42,   166,
    50,    18,    72,    36,    19,    23,   167,    24,    25,   123,
    27,    30,    32,    33,    55,    61,    56,   178,    39,    66,
    44,    50,    64,   152,   167,    98,   101,    99,   100,    44,
   140,    70,    59,    98,   101,    99,   100,    51,   105,    63,
   102,   104,   136,    77,    78,    94,    44,    89,   114,   115,
   138,   139,   155,   156,    52,    53,    59,   -73,   -74,    60,
    36,    76,    86,    87,    91,    94,    95,   112,   116,   117,
   119,   120,   -63,   121,    36,   128,   129,   130,    94,    44,
   133,    44,   142,   143,   144,   145,   146,    50,   148,   149,
   109,   159,   160,   161,   164,    36,   168,    44,    44,    94,
   170,   171,   172,   173,    50,   175,   176,   177,    36,   180,
   181 ]

racc_action_check = [
     0,     0,     0,   118,    37,    70,   111,     0,     0,     1,
    30,    50,    30,    29,    50,     0,    36,    30,    30,     0,
    29,     0,     0,     0,   111,     0,     0,   118,     0,     0,
     0,     0,     2,     2,     2,    70,     0,    37,     0,     2,
     2,    16,    29,    29,    36,    36,    36,     2,    21,   124,
    17,     2,    67,     2,     2,     2,   124,     2,     2,    67,
     2,     2,     2,     2,    21,    26,    21,   165,     2,    26,
     2,   109,    26,   109,   165,    47,    47,    47,    47,    21,
    96,    67,    67,    96,    96,    96,    96,    18,    48,    26,
    48,    48,    92,    35,    35,    92,    41,    41,    52,    52,
    94,    94,   110,   110,    19,    20,    22,    23,    24,    25,
    28,    33,    39,    40,    42,    44,    45,    51,    54,    57,
    59,    62,    64,    65,    69,    71,    80,    83,    86,    88,
    89,    91,    98,    99,   100,   101,   102,   103,   104,   105,
   107,   113,   116,   117,   120,   123,   127,   132,   134,   136,
   142,   143,   144,   151,   152,   153,   154,   163,   167,   173,
   174 ]

racc_action_pointer = [
    -1,     9,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    37,    38,    66,    83,
   101,    40,    72,    85,    86,   105,    61,   nil,    88,     9,
   -14,   nil,   nil,    80,   nil,    56,     8,     0,   nil,    73,
   109,    57,    74,   nil,   101,   116,   nil,    70,    80,   nil,
    -2,    95,    74,   nil,   101,   nil,   nil,   102,   nil,   114,
   nil,   nil,    94,   nil,    93,    94,   nil,    48,   nil,   102,
     1,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   104,   nil,   nil,   105,   nil,   nil,   114,   nil,    90,   126,
   nil,    92,    81,   nil,    59,   nil,    78,   nil,   126,   127,
   128,   131,   132,   125,   134,   135,   nil,   127,   nil,    59,
    84,     2,   nil,   137,   nil,   nil,   138,   139,    -8,   nil,
   140,   nil,   nil,   123,    45,   nil,   nil,   142,   nil,   nil,
   nil,   nil,   108,   nil,   109,   nil,   135,   nil,   nil,   nil,
   nil,   nil,   146,   147,   148,   nil,   nil,   nil,   nil,   nil,
   nil,   139,   142,   138,   142,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   151,   nil,    63,   nil,   136,   nil,   nil,
   nil,   nil,   nil,   144,   145,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -1,  -116,    -2,    -3,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,  -116,  -116,  -116,  -116,
  -116,  -116,   -51,   -53,   -54,  -116,  -116,   -60,  -116,  -116,
   -70,   -72,   -75,   -76,   -86,   -87,  -116,  -116,   -96,  -116,
  -116,  -101,  -116,  -106,  -116,  -116,    -4,  -116,  -116,   -25,
   -32,  -116,  -116,   -49,  -116,   -53,   -54,  -116,   -52,  -116,
   -55,   -56,  -116,   -58,   -59,  -116,   -62,  -116,   -65,  -116,
  -116,  -116,   -81,   -71,   -73,   -74,   -77,   -91,   -92,   -94,
  -116,   -89,   -90,  -116,   -95,   -97,  -116,  -100,  -116,  -104,
  -107,  -116,  -108,  -109,  -112,   182,  -116,   -18,  -116,  -116,
  -116,  -116,  -116,  -116,   -27,   -29,   -31,   -33,   -35,  -116,
  -116,  -116,   -44,  -116,   -47,   -48,  -116,  -116,   -82,   -84,
  -116,   -61,   -64,  -116,  -116,   -68,   -78,  -116,   -80,   -88,
   -93,   -98,  -103,  -105,  -102,  -110,  -116,  -113,  -114,  -115,
   -17,   -19,  -116,  -116,  -116,   -23,   -24,   -26,   -28,   -30,
   -34,  -116,  -116,  -116,   -39,   -41,   -42,   -43,   -45,   -46,
   -50,   -99,   -83,  -116,   -57,  -116,   -67,  -116,   -79,  -111,
   -20,   -21,   -22,  -116,  -116,   -38,   -40,   -85,   -66,   -69,
   -36,   -37 ]

racc_goto_table = [
    67,    49,   108,    90,   124,    93,    97,    68,    58,   132,
     1,     3,   134,    46,    79,    83,     2,    96,    48,   103,
   106,   107,   153,   154,   111,   113,    54,    62,    65,    73,
   118,    80,    85,    57,    88,    92,   137,   nil,   nil,   nil,
   nil,   125,   nil,   nil,   nil,   122,   nil,   131,   nil,   nil,
   nil,   nil,   nil,   135,   nil,   141,   127,   nil,   165,   150,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   147,   nil,   nil,
   nil,   nil,   nil,   151,    90,   125,    90,   169,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   174,   nil,   nil,   179 ]

racc_goto_check = [
    33,    17,    21,    48,    35,    44,    15,    34,    28,    46,
     1,     3,    46,     3,    41,    41,     2,    14,    16,    18,
    19,    20,    22,    23,    24,    25,    26,    30,    31,    36,
    37,    40,    43,    45,    47,    49,    50,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,    34,   nil,    44,   nil,   nil,
   nil,   nil,   nil,    44,   nil,    15,    28,   nil,    35,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,
   nil,   nil,   nil,    17,    48,    33,    48,    44,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,    33 ]

racc_goto_pointer = [
   nil,    10,    16,    11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -30,   -41,     1,   -16,   -29,   -30,
   -29,   -48,   -88,   -87,   -27,   -27,     5,   nil,   -14,   nil,
     1,     2,   nil,   -28,   -22,   -65,    -1,   -29,   nil,   nil,
    -5,   -21,   nil,    -5,   -39,    12,   -79,    -7,   -38,    -9,
   -58 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     7,     8,     9,
    10,    11,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    20,    22,    71,    26,
   nil,   nil,    28,    29,   nil,   nil,    31,   nil,    34,    35,
   nil,   nil,    37,    38,   nil,    40,    41,   nil,    43,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 45, :_reduce_none,
  2, 45, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_13,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_16,
  4, 55, :_reduce_none,
  1, 57, :_reduce_none,
  2, 57, :_reduce_none,
  3, 58, :_reduce_20,
  3, 58, :_reduce_21,
  3, 58, :_reduce_22,
  2, 58, :_reduce_none,
  4, 56, :_reduce_24,
  1, 59, :_reduce_25,
  3, 59, :_reduce_26,
  1, 61, :_reduce_none,
  2, 61, :_reduce_28,
  1, 61, :_reduce_none,
  2, 61, :_reduce_30,
  2, 60, :_reduce_31,
  0, 62, :_reduce_32,
  1, 62, :_reduce_33,
  2, 62, :_reduce_34,
  1, 62, :_reduce_35,
  4, 64, :_reduce_36,
  4, 64, :_reduce_37,
  3, 63, :_reduce_38,
  1, 65, :_reduce_39,
  2, 65, :_reduce_40,
  1, 66, :_reduce_none,
  1, 66, :_reduce_none,
  4, 50, :_reduce_43,
  1, 67, :_reduce_44,
  2, 67, :_reduce_45,
  4, 51, :_reduce_46,
  1, 68, :_reduce_47,
  1, 68, :_reduce_48,
  2, 47, :_reduce_49,
  4, 47, :_reduce_50,
  1, 69, :_reduce_none,
  2, 69, :_reduce_52,
  1, 70, :_reduce_53,
  1, 70, :_reduce_54,
  2, 48, :_reduce_55,
  2, 49, :_reduce_56,
  4, 49, :_reduce_57,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 72, :_reduce_60,
  3, 72, :_reduce_61,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  3, 52, :_reduce_64,
  2, 52, :_reduce_65,
  5, 52, :_reduce_66,
  4, 52, :_reduce_67,
  1, 78, :_reduce_68,
  3, 78, :_reduce_69,
  1, 75, :_reduce_70,
  2, 75, :_reduce_71,
  1, 75, :_reduce_none,
  1, 79, :_reduce_73,
  1, 79, :_reduce_74,
  1, 79, :_reduce_75,
  1, 79, :_reduce_76,
  2, 79, :_reduce_77,
  2, 77, :_reduce_78,
  3, 77, :_reduce_79,
  2, 77, :_reduce_80,
  1, 77, :_reduce_81,
  2, 71, :_reduce_82,
  3, 71, :_reduce_83,
  1, 80, :_reduce_84,
  3, 80, :_reduce_85,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  3, 82, :_reduce_88,
  1, 83, :_reduce_none,
  1, 83, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  3, 81, :_reduce_93,
  2, 81, :_reduce_94,
  2, 54, :_reduce_none,
  1, 85, :_reduce_none,
  2, 85, :_reduce_none,
  3, 86, :_reduce_none,
  4, 53, :_reduce_99,
  2, 53, :_reduce_100,
  1, 88, :_reduce_101,
  3, 88, :_reduce_102,
  3, 88, :_reduce_103,
  1, 90, :_reduce_none,
  2, 90, :_reduce_none,
  1, 89, :_reduce_106,
  2, 89, :_reduce_107,
  2, 91, :_reduce_108,
  1, 92, :_reduce_109,
  2, 92, :_reduce_110,
  3, 92, :_reduce_111,
  1, 87, :_reduce_112,
  2, 87, :_reduce_113,
  1, 93, :_reduce_114,
  1, 93, :_reduce_115 ]

racc_reduce_n = 116

racc_shift_n = 182

racc_token_table = {
  false => 0,
  :error => 1,
  :BLANK => 2,
  :TEAMS => 3,
  :NEWLINE => 4,
  "---" => 5,
  :TEXT => 6,
  "--" => 7,
  "-" => 8,
  :PROP => 9,
  :PROP_END => 10,
  "," => 11,
  :PROP_NAME => 12,
  "(" => 13,
  :MINUTE => 14,
  ")" => 15,
  "[" => 16,
  "]" => 17,
  :YELLOW_CARD => 18,
  :RED_CARD => 19,
  :GROUP_DEF => 20,
  "|" => 21,
  :TEAM => 22,
  :ROUND_DEF => 23,
  :DATE => 24,
  :DURATION => 25,
  :DATETIME => 26,
  :GROUP => 27,
  "/" => 28,
  :ROUND => 29,
  :ORD => 30,
  :TIME => 31,
  :WDAY => 32,
  :STATUS => 33,
  "@" => 34,
  :TIMEZONE => 35,
  :VS => 36,
  :SCORE => 37,
  :SCORE_MORE => 38,
  :PLAYER => 39,
  ";" => 40,
  :OG => 41,
  :PEN => 42 }

racc_nt_base = 43

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "BLANK",
  "TEAMS",
  "NEWLINE",
  "\"---\"",
  "TEXT",
  "\"--\"",
  "\"-\"",
  "PROP",
  "PROP_END",
  "\",\"",
  "PROP_NAME",
  "\"(\"",
  "MINUTE",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "YELLOW_CARD",
  "RED_CARD",
  "GROUP_DEF",
  "\"|\"",
  "TEAM",
  "ROUND_DEF",
  "DATE",
  "DURATION",
  "DATETIME",
  "GROUP",
  "\"/\"",
  "ROUND",
  "ORD",
  "TIME",
  "WDAY",
  "STATUS",
  "\"@\"",
  "TIMEZONE",
  "VS",
  "SCORE",
  "SCORE_MORE",
  "PLAYER",
  "\";\"",
  "OG",
  "PEN",
  "$start",
  "document",
  "elements",
  "element",
  "date_header",
  "group_header",
  "round_header",
  "group_def",
  "round_def",
  "match_line",
  "goal_lines",
  "goal_lines_alt",
  "teams_list",
  "lineup_lines",
  "list",
  "list_item",
  "lineup",
  "lineup_name",
  "lineup_sep",
  "lineup_name_opts",
  "card",
  "lineup_sub",
  "card_body",
  "card_type",
  "team_values",
  "round_date_opts",
  "date_header_body",
  "date_header_date",
  "geo_opts",
  "round_values",
  "group_sep",
  "round_sep",
  "match_opts",
  "match",
  "more_match_opts",
  "more_matches",
  "date_opts",
  "geo_values",
  "match_result",
  "match_fixture",
  "match_sep",
  "score",
  "goals_alt",
  "goal_alt",
  "minute",
  "goal_lines_body",
  "goals",
  "goal_sep",
  "goal",
  "minutes",
  "minute_opts" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_13(val, _values, result)
     trace( "REDUCE BLANK" )
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_16(val, _values, result)
     puts "!! skipping invalid content (trying to recover from parse error):"
                pp val[0] 
                @errors << "parser error (recover) - skipping #{val[0].pretty_inspect}"

    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_20(val, _values, result)
      puts "level 3"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_21(val, _values, result)
      puts "level 2 #{val[1]}"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_22(val, _values, result)
      puts "level 1 #{val[1]}"
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_24(val, _values, result)
      @tree << LineupLine.new( team:    val[0],
                                                    lineup:  val[1]
                                                  ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_25(val, _values, result)
     result = [[val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_26(val, _values, result)
                           ## if lineup_sep is -  start a new sub array!!
                       if val[1] == '-'
                          result << [val[2]]
                       else
                          result[-1] << val[2]
                       end

    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_28(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_30(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_31(val, _values, result)
                                  kwargs = { name: val[0] }.merge( val[1] )
                              result = Lineup.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_32(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_33(val, _values, result)
                                  result = { card: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_34(val, _values, result)
                                  result = { card: val[0], sub: val[1] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_35(val, _values, result)
                                  result = { sub: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_36(val, _values, result)
                                  result = Sub.new( sub:    val[1],
                                                minute: Minute.new(val[2][1]) 
                                              )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_37(val, _values, result)
                                  result = Sub.new( sub:    val[2],
                                                minute: Minute.new(val[1][1]) 
                                              )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_38(val, _values, result)
                                  kwargs = val[1]
                              result = Card.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_39(val, _values, result)
     result = { name: val[0] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_40(val, _values, result)
     result = { name: val[0],
                                        minute: Minute.new(val[1][1]) } 

    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_43(val, _values, result)
                          @tree << GroupDef.new( name:  val[0],
                                             teams: val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_44(val, _values, result)
                                                   result = val
                                               ## e.g. val is ["Austria"] 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_45(val, _values, result)
                                                   result.push( val[1] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_46(val, _values, result)
                          kwargs = { name: val[0] }.merge( val[2] )
                      @tree<< RoundDef.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_47(val, _values, result)
     result = { date: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_48(val, _values, result)
     result = { duration: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_49(val, _values, result)
                         kwargs = {}.merge( val[0] )
                     @tree <<  DateHeader.new( **kwargs )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_50(val, _values, result)
                         kwargs = {}.merge( val[1] )
                     @tree <<  DateHeader.new( **kwargs )  

    result
  end
.,.,

# reduce 51 omitted

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_52(val, _values, result)
      result = {}.merge( val[0], val[1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_53(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_54(val, _values, result)
       result = {}.merge( val[0][1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_55(val, _values, result)
                         @tree <<  GroupHeader.new( name: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_56(val, _values, result)
                         @tree <<  RoundHeader.new( names: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_57(val, _values, result)
                        @tree <<  RoundHeader.new( names: val[0], group: val[2] )  

    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.y', 221)
  def _reduce_60(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_61(val, _values, result)
       result.push( val[2] )
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_64(val, _values, result)
                           kwargs = {}.merge( val[0], val[1], val[2] )
                       @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_65(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 245)
  def _reduce_66(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )
                     
                      ## add more match fixtures
                      val[3].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_67(val, _values, result)
                          kwargs = val[0]
                      @tree << MatchLine.new( **kwargs )
 
                      ## add more match fixtures
                      val[2].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 269)
  def _reduce_68(val, _values, result)
                                        trace( "REDUCE => more_matches : match" ) 
                                    result = val

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_69(val, _values, result)
                                         trace( "REDUCE => more_matches : more_matches ',' match" ) 
                                     result.push( val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 280)
  def _reduce_70(val, _values, result)
       result = { ord: val[0][1][:value] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_71(val, _values, result)
       result = { ord: val[0][1][:value] }.merge( val[1] )
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.y', 285)
  def _reduce_73(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 286)
  def _reduce_74(val, _values, result)
       result = {}.merge( val[0][1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 287)
  def _reduce_75(val, _values, result)
       result = { time: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 288)
  def _reduce_76(val, _values, result)
       result = { wday: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_77(val, _values, result)
       result = { wday: val[0][1], time: val[1][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_78(val, _values, result)
                          ## todo - add possible status_notes too!!! 
                      result = { status: val[0][1][:status] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_79(val, _values, result)
                         result = { status: val[0][1][:status] }.merge( val[1] ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_80(val, _values, result)
     result = {}.merge( val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_81(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 309)
  def _reduce_82(val, _values, result)
     result = { geo: val[1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_83(val, _values, result)
     result = { geo: val[1], timezone: val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_84(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_85(val, _values, result)
      result.push( val[2] )
    result
  end
.,.,

# reduce 86 omitted

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.y', 322)
  def _reduce_88(val, _values, result)
                                   trace( "RECUDE match_fixture" )
                               result = { team1: val[0],
                                          team2: val[2] }   

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_93(val, _values, result)
                               trace( "REDUCE => match_result : TEAM score TEAM" )
                           result = { team1: val[0],
                                      team2: val[2],
                                      score: val[1][1]
                                    }   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 344)
  def _reduce_94(val, _values, result)
                              trace( "REDUCE  => match_result : match_fixture score" )
                          result = { score: val[1][1] }.merge( val[0] )  

    result
  end
.,.,

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.y', 376)
  def _reduce_99(val, _values, result)
                           kwargs = val[1]
                       @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_100(val, _values, result)
                             kwargs = val[0]
                         @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_101(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: [] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_102(val, _values, result)
      result = { goals1: [],
                                                              goals2: val[2] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 392)
  def _reduce_103(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: val[2] }

    result
  end
.,.,

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_106(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 407)
  def _reduce_107(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 423)
  def _reduce_108(val, _values, result)
                      result = Goal.new( player:  val[0],
                                     minutes: val[1] )   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_109(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 436)
  def _reduce_110(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 437)
  def _reduce_111(val, _values, result)
     result.push( val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 443)
  def _reduce_112(val, _values, result)
                            kwargs = {}.merge( val[0][1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 448)
  def _reduce_113(val, _values, result)
                            kwargs = { }.merge( val[0][1] ).merge( val[1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 452)
  def _reduce_114(val, _values, result)
      result = { og: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 453)
  def _reduce_115(val, _values, result)
      result = { pen: true }
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RaccMatchParser
