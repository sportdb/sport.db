#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
class RaccMatchParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    34,   120,    12,   106,    33,    38,    30,    58,    95,    39,
    16,    61,    24,   121,    13,    40,    27,    14,    15,    45,
    17,    19,    22,    24,    12,    30,    33,    27,    30,    56,
    71,    32,    16,    62,    63,   130,    13,    43,    27,    14,
    15,    41,    17,    19,    22,    24,    55,    52,    55,    92,
    32,    59,    81,    32,    82,    64,   129,    46,    49,    48,
    42,    73,    75,    76,    77,    68,    53,    56,    53,    56,
    66,    32,    86,    87,   108,   109,   118,   119,   126,   127,
   135,   127,    71,    72,    84,    88,    89,    90,    27,    97,
    99,    42,   100,   101,    32,   103,    32,   110,    38,   112,
   113,    81,    71,   122,   123,   124,    27,   128,    32,    32,
    71,    38,   133,    71,    27,   137,   138 ]

racc_action_check = [
     1,    83,     1,    69,     1,    12,     1,    22,    53,    13,
     1,    27,    22,    83,     1,    14,     1,     1,     1,    17,
     1,     1,     1,     1,     0,    16,     0,    20,     0,    53,
    69,     1,     0,    27,    27,    98,     0,    16,     0,     0,
     0,    15,     0,     0,     0,     0,    21,    21,    50,    50,
    16,    26,    38,     0,    38,    28,    98,    18,    18,    18,
    15,    36,    36,    36,    36,    30,    21,    21,    50,    50,
    29,    29,    40,    40,    71,    71,    82,    82,    93,    93,
   125,   125,    32,    34,    39,    43,    44,    47,    52,    54,
    56,    58,    60,    63,    65,    66,    68,    73,    74,    76,
    77,    79,    81,    85,    88,    89,    92,    96,   102,   104,
   106,   115,   116,   117,   127,   130,   132 ]

racc_action_pointer = [
    22,     0,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -2,    -6,     0,    37,    19,    15,    53,   nil,
    11,    42,   -11,   nil,   nil,   nil,    22,     5,    51,    40,
    35,   nil,    50,   nil,    83,   nil,    58,   nil,    44,    68,
    54,   nil,   nil,    74,    75,   nil,   nil,    66,   nil,   nil,
    44,   nil,    72,     4,    85,   nil,    63,   nil,    68,   nil,
    76,   nil,   nil,    77,   nil,    63,    91,   nil,    65,    -2,
   nil,    41,   nil,    93,    91,   nil,    95,    96,   nil,    93,
   nil,    70,    64,    -3,   nil,    99,   nil,   nil,   100,   101,
   nil,   nil,    90,    74,   nil,   nil,   103,   nil,    30,   nil,
   nil,   nil,    77,   nil,    78,   nil,    78,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   104,   101,    81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    76,   nil,    98,   nil,   nil,
    88,   nil,   107,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -90,   -90,    -1,    -3,    -4,    -5,    -6,    -7,    -8,    -9,
   -10,   -11,   -90,   -90,   -90,   -54,   -90,   -90,   -90,   -41,
   -90,   -90,   -51,   -53,   -56,   -65,   -66,   -90,   -90,   -74,
   -90,   -79,   -90,   -89,   -90,    -2,   -90,   -13,   -20,   -90,
   -90,   -37,   -55,   -90,   -90,   -39,   -40,   -90,   -43,   -44,
   -90,   -46,   -90,   -90,   -90,   -60,   -90,   -52,   -54,   -71,
   -90,   -68,   -69,   -90,   -73,   -90,   -77,   -80,   -90,   -81,
   -82,   -85,   139,   -90,   -90,   -15,   -16,   -18,   -21,   -22,
   -24,   -90,   -90,   -90,   -32,   -90,   -35,   -36,   -90,   -90,
   -42,   -45,   -90,   -90,   -49,   -57,   -90,   -59,   -61,   -63,
   -67,   -70,   -76,   -78,   -75,   -83,   -90,   -86,   -87,   -88,
   -12,   -14,   -17,   -19,   -23,   -90,   -90,   -27,   -29,   -30,
   -31,   -33,   -34,   -38,   -72,   -90,   -48,   -90,   -58,   -62,
   -90,   -84,   -90,   -26,   -28,   -47,   -50,   -64,   -25 ]

racc_goto_table = [
    50,    37,    70,    80,    67,    93,    51,   102,     2,    35,
   104,     1,    36,    74,    78,    79,   116,   117,    83,    85,
    47,    57,    96,    98,    60,    44,    65,    69,   107,   nil,
   nil,   nil,    94,   nil,   nil,    91,   nil,   nil,   nil,   105,
   nil,   nil,   nil,   nil,   114,   125,   nil,   nil,   nil,   nil,
   nil,   115,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   111,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    94,   nil,   nil,   nil,   131,    67,   nil,    67,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   134,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   132,   nil,   nil,   136 ]

racc_goto_check = [
    26,    13,    18,    17,    38,    28,    27,    36,     2,     2,
    36,     1,    12,    14,    15,    16,    19,    20,    21,    22,
    24,    29,    30,    31,    34,    35,    37,    39,    40,   nil,
   nil,   nil,    26,   nil,   nil,    27,   nil,   nil,   nil,    18,
   nil,   nil,   nil,   nil,    17,    28,   nil,   nil,   nil,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,    18,    38,   nil,    38,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,   nil,   nil,    26 ]

racc_goto_pointer = [
   nil,    11,     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     0,   -11,   -23,   -24,   -23,   -35,   -30,   -66,
   -65,   -21,   -21,   nil,     2,   nil,   -20,   -15,   -47,    -1,
   -31,   -33,   nil,   nil,    -3,     9,   -58,    -3,   -25,    -5,
   -43 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,   nil,    20,    21,   nil,   nil,    23,
    54,   nil,    25,    26,   nil,    28,    29,   nil,    31,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 36, :_reduce_none,
  2, 36, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  4, 46, :_reduce_12,
  1, 47, :_reduce_13,
  3, 47, :_reduce_14,
  2, 47, :_reduce_15,
  1, 49, :_reduce_none,
  2, 49, :_reduce_17,
  1, 49, :_reduce_none,
  2, 49, :_reduce_19,
  1, 48, :_reduce_20,
  2, 48, :_reduce_21,
  1, 50, :_reduce_22,
  2, 50, :_reduce_23,
  1, 50, :_reduce_24,
  4, 52, :_reduce_25,
  3, 51, :_reduce_26,
  1, 54, :_reduce_27,
  2, 54, :_reduce_28,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  4, 41, :_reduce_31,
  1, 56, :_reduce_32,
  2, 56, :_reduce_33,
  4, 42, :_reduce_34,
  1, 57, :_reduce_35,
  1, 57, :_reduce_36,
  2, 38, :_reduce_37,
  4, 38, :_reduce_38,
  2, 39, :_reduce_39,
  2, 40, :_reduce_40,
  1, 58, :_reduce_41,
  3, 58, :_reduce_42,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  3, 43, :_reduce_45,
  2, 43, :_reduce_46,
  5, 43, :_reduce_47,
  4, 43, :_reduce_48,
  1, 63, :_reduce_49,
  3, 63, :_reduce_50,
  1, 60, :_reduce_51,
  2, 60, :_reduce_52,
  1, 60, :_reduce_none,
  1, 64, :_reduce_54,
  2, 64, :_reduce_55,
  1, 64, :_reduce_56,
  2, 62, :_reduce_57,
  3, 62, :_reduce_58,
  2, 62, :_reduce_59,
  1, 62, :_reduce_60,
  2, 65, :_reduce_61,
  3, 65, :_reduce_62,
  1, 66, :_reduce_63,
  3, 66, :_reduce_64,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  3, 68, :_reduce_67,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  3, 67, :_reduce_70,
  2, 67, :_reduce_71,
  4, 44, :_reduce_72,
  2, 44, :_reduce_73,
  1, 70, :_reduce_74,
  3, 70, :_reduce_75,
  3, 70, :_reduce_76,
  1, 72, :_reduce_none,
  2, 72, :_reduce_none,
  1, 71, :_reduce_79,
  2, 71, :_reduce_80,
  2, 73, :_reduce_81,
  1, 74, :_reduce_82,
  2, 74, :_reduce_83,
  3, 74, :_reduce_84,
  1, 53, :_reduce_85,
  2, 53, :_reduce_86,
  1, 75, :_reduce_87,
  1, 75, :_reduce_88,
  1, 45, :_reduce_89 ]

racc_reduce_n = 90

racc_shift_n = 139

racc_token_table = {
  false => 0,
  :error => 1,
  :PROP => 2,
  "." => 3,
  :NEWLINE => 4,
  "," => 5,
  "-" => 6,
  :PROP_NAME => 7,
  "(" => 8,
  ")" => 9,
  "[" => 10,
  "]" => 11,
  :YELLOW_CARD => 12,
  :RED_CARD => 13,
  :GROUP_DEF => 14,
  "|" => 15,
  :TEAM => 16,
  :ROUND_DEF => 17,
  :DATE => 18,
  :DURATION => 19,
  :GROUP => 20,
  :ROUND => 21,
  :ORD => 22,
  :TIME => 23,
  :STATUS => 24,
  "@" => 25,
  :TIMEZONE => 26,
  :TEXT => 27,
  :VS => 28,
  :SCORE => 29,
  ";" => 30,
  :PLAYER => 31,
  :MINUTE => 32,
  :OG => 33,
  :PEN => 34 }

racc_nt_base = 35

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "PROP",
  "\".\"",
  "NEWLINE",
  "\",\"",
  "\"-\"",
  "PROP_NAME",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "YELLOW_CARD",
  "RED_CARD",
  "GROUP_DEF",
  "\"|\"",
  "TEAM",
  "ROUND_DEF",
  "DATE",
  "DURATION",
  "GROUP",
  "ROUND",
  "ORD",
  "TIME",
  "STATUS",
  "\"@\"",
  "TIMEZONE",
  "TEXT",
  "VS",
  "SCORE",
  "\";\"",
  "PLAYER",
  "MINUTE",
  "OG",
  "PEN",
  "$start",
  "statements",
  "statement",
  "date_header",
  "group_header",
  "round_header",
  "group_def",
  "round_def",
  "match_line",
  "goal_lines",
  "empty_line",
  "lineup_lines",
  "lineup",
  "lineup_name",
  "lineup_sep",
  "lineup_name_more",
  "card",
  "lineup_sub",
  "minute",
  "card_body",
  "card_type",
  "team_values",
  "round_date_opts",
  "round_values",
  "round_sep",
  "match_opts",
  "match",
  "more_match_opts",
  "more_matches",
  "date_opts",
  "geo_opts",
  "geo_values",
  "match_result",
  "match_fixture",
  "match_sep",
  "goal_lines_body",
  "goals",
  "goal_sep",
  "goal",
  "minutes",
  "minute_opts" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_12(val, _values, result)
      @tree << LineupLine.new( team:    val[0],
                                                    lineup:  val[1]
                                                  ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_13(val, _values, result)
     result = [[val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
                           ## if lineup_sep is -  start a new sub array!!
                       if val[1] == '-'
                          result << [val[2]]
                       else
                          result[-1] << val[2]
                       end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_15(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_17(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_19(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_20(val, _values, result)
                                  result = Lineup.new( name: val[0] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_21(val, _values, result)
                                  kwargs = { name: val[0] }.merge( val[1] )
                              result = Lineup.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_22(val, _values, result)
                                  result = { card: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_23(val, _values, result)
                                  result = { card: val[0], sub: val[1] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_24(val, _values, result)
                                  result = { sub: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_25(val, _values, result)
                                  result = Sub.new( minute: val[1], sub: val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_26(val, _values, result)
                                  kwargs = val[1]
                              result = Card.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_27(val, _values, result)
     result = { name: val[0] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_28(val, _values, result)
     result = { name: val[0], minute: val[1] }
    result
  end
.,.,

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_31(val, _values, result)
                          @tree << GroupDef.new( name:  val[0],
                                             teams: val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_32(val, _values, result)
                                                   result = val
                                               ## e.g. val is ["Austria"] 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_33(val, _values, result)
                                                   result.push( val[1] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_34(val, _values, result)
                          kwargs = { name: val[0] }.merge( val[2] )
                      @tree<< RoundDef.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_35(val, _values, result)
     result = { date: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_36(val, _values, result)
     result = { duration: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 140)
  def _reduce_37(val, _values, result)
                         @tree <<  DateHeader.new( date: val[0][1] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_38(val, _values, result)
                         @tree <<  DateHeader.new( date: val[1][1] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_39(val, _values, result)
                         @tree <<  GroupHeader.new( name: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_40(val, _values, result)
                         @tree <<  RoundHeader.new( names: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_41(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_42(val, _values, result)
       result.push( val[2] )
    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_45(val, _values, result)
                           kwargs = {}.merge( val[0], val[1], val[2] )
                       @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_46(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_47(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )
                     
                      ## add more match fixtures
                      val[3].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_48(val, _values, result)
                          kwargs = val[0]
                      @tree << MatchLine.new( **kwargs )
 
                      ## add more match fixtures
                      val[2].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_49(val, _values, result)
                                        puts "  REDUCE => more_match_fixtures : match_fixture" 
                                    result = val

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_50(val, _values, result)
                                         puts "  REDUCE => more_match_fixtures : more_match_fixtures ',' match_fixture " 
                                     result.push( val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 224)
  def _reduce_51(val, _values, result)
       result = { ord: val[0][1][:value] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_52(val, _values, result)
       result = { ord: val[0][1][:value] }.merge( val[1] )
    result
  end
.,.,

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_54(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_55(val, _values, result)
       result = { date: val[0][1], time: val[1][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_56(val, _values, result)
       result = { time: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_57(val, _values, result)
                          ## todo - add possible status_notes too!!! 
                      result = { status: val[0][1][:status] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_58(val, _values, result)
                         result = { status: val[0][1][:status] }.merge( val[1] ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 244)
  def _reduce_59(val, _values, result)
     result = {}.merge( val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 245)
  def _reduce_60(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 251)
  def _reduce_61(val, _values, result)
     result = { geo: val[1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 252)
  def _reduce_62(val, _values, result)
     result = { geo: val[1], timezone: val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_63(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_64(val, _values, result)
      result.push( val[2] )
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_67(val, _values, result)
                                   puts "  RECUDE match_fixture"
                               result = { team1: val[0],
                                          team2: val[2] }   

    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.y', 275)
  def _reduce_70(val, _values, result)
                               puts "  REDUCE => match_result : TEXT  SCORE  TEXT"
                           result = { team1: val[0],
                                      team2: val[2],
                                      score: val[1][1]
                                    }   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 283)
  def _reduce_71(val, _values, result)
                              puts "  REDUCE  => match_result : match_fixture SCORE"
                          result = { score: val[1][1] }.merge( val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_72(val, _values, result)
                           kwargs = val[1]
                       @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_73(val, _values, result)
                             kwargs = val[0]
                         @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_74(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: [] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_75(val, _values, result)
      result = { goals1: [],
                                                              goals2: val[2] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 318)
  def _reduce_76(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: val[2] }

    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_79(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 333)
  def _reduce_80(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 349)
  def _reduce_81(val, _values, result)
                      result = Goal.new( player:  val[0],
                                     minutes: val[1] )   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 361)
  def _reduce_82(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_83(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 363)
  def _reduce_84(val, _values, result)
     result.push( val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 369)
  def _reduce_85(val, _values, result)
                            kwargs = {}.merge( val[0][1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_86(val, _values, result)
                            kwargs = { }.merge( val[0][1] ).merge( val[1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_87(val, _values, result)
      result = { og: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 379)
  def _reduce_88(val, _values, result)
      result = { pen: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 384)
  def _reduce_89(val, _values, result)
     puts '  MATCH empty_line'
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RaccMatchParser
