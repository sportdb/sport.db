#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
class RaccMatchParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    15,    12,    16,    45,    85,   129,   163,   169,    17,    47,
    75,    88,    76,    73,    50,    21,    82,    32,    33,    18,
    69,    36,    19,    23,   164,    24,    25,    51,    27,    30,
    32,    33,   168,    15,    12,    16,    59,    39,    39,    44,
    42,    17,    70,    72,    59,    83,    78,    79,    21,    55,
    73,    56,    18,   131,    36,    19,    23,   126,    24,    25,
    52,    27,    30,    32,    33,    44,    42,    61,   172,   186,
    39,    66,    44,    42,    64,   173,   173,    78,    79,    70,
    72,    59,   146,   132,    53,   101,   104,   102,   103,   117,
   118,    63,   101,   104,   102,   103,   108,   112,   105,   107,
   113,   142,    59,    44,    97,    92,    50,   -74,   158,   144,
   145,   161,   162,   180,   181,   -75,    60,    36,    77,    89,
    90,    44,    97,    98,   115,   119,   120,   122,   123,   -64,
   124,    36,   133,   134,   135,    39,   137,    97,    44,   140,
    44,   148,   149,   150,   151,   152,    50,   154,   155,   112,
   165,   166,   167,   170,    36,   174,   175,    44,    97,   177,
   178,   179,    50,   183,   184,   185,    36,   188,   189 ]

racc_action_check = [
     0,     0,     0,     1,    37,    70,   114,   121,     0,    16,
    30,    37,    30,    29,    17,     0,    36,    30,    30,     0,
    29,     0,     0,     0,   114,     0,     0,    18,     0,     0,
     0,     0,   121,     2,     2,     2,    70,     0,    37,     0,
     0,     2,    29,    29,    29,    36,    36,    36,     2,    21,
    67,    21,     2,    71,     2,     2,     2,    67,     2,     2,
    19,     2,     2,     2,     2,    21,    21,    26,   127,   171,
     2,    26,     2,     2,    26,   127,   171,    35,    35,    67,
    67,    67,    99,    71,    20,    99,    99,    99,    99,    52,
    52,    26,    47,    47,    47,    47,    48,    50,    48,    48,
    50,    95,    22,    41,    95,    41,   112,    23,   112,    97,
    97,   113,   113,   157,   157,    24,    25,    28,    33,    39,
    40,    42,    44,    45,    51,    54,    57,    59,    62,    64,
    65,    69,    72,    81,    84,    86,    88,    89,    91,    92,
    94,   101,   102,   103,   104,   105,   106,   107,   108,   110,
   116,   119,   120,   123,   126,   130,   132,   139,   142,   148,
   149,   150,   158,   159,   160,   169,   173,   180,   182 ]

racc_action_pointer = [
    -1,     3,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,     2,     6,    39,
    80,    25,    67,    85,    93,   112,    63,   nil,    95,     9,
   -14,   nil,   nil,    87,   nil,    39,     8,     0,   nil,    79,
   116,    63,    81,   nil,   108,   123,   nil,    87,    88,   nil,
    84,   102,    65,   nil,   108,   nil,   nil,   109,   nil,   121,
   nil,   nil,   101,   nil,   100,   101,   nil,    46,   nil,   109,
     1,    49,   128,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   111,   nil,   nil,   112,   nil,    97,   nil,   132,   123,
   nil,    98,   135,   nil,   100,    90,   nil,    66,   nil,    80,
   nil,   135,   136,   137,   140,   141,   134,   143,   144,   nil,
   136,   nil,    94,    93,     2,   nil,   146,   nil,   nil,   147,
   148,    -4,   nil,   149,   nil,   nil,   132,    64,   nil,   nil,
   151,   nil,   152,   nil,   nil,   nil,   nil,   nil,   nil,   117,
   nil,   nil,   144,   nil,   nil,   nil,   nil,   nil,   155,   156,
   157,   nil,   nil,   nil,   nil,   nil,   nil,    99,   150,   146,
   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   159,
   nil,    65,   nil,   144,   nil,   nil,   nil,   nil,   nil,   nil,
   152,   nil,   153,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -123,    -2,    -3,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,  -123,  -123,  -123,  -123,
  -123,  -123,   -52,   -54,   -55,  -123,  -123,   -61,  -123,  -123,
   -71,   -73,   -76,   -77,   -89,   -90,  -123,  -123,   -99,  -123,
  -123,  -108,  -123,  -113,  -123,  -123,    -4,  -123,  -123,   -25,
   -32,  -123,  -123,   -50,  -123,   -54,   -55,  -123,   -53,  -123,
   -56,   -57,  -123,   -59,   -60,  -123,   -63,  -123,   -66,  -123,
  -123,  -123,  -123,   -84,   -72,   -74,   -75,   -78,   -94,   -95,
   -97,  -123,   -92,   -93,  -123,   -98,  -123,  -101,  -102,  -104,
  -107,  -123,  -111,  -114,  -109,  -115,  -116,  -119,   190,  -123,
   -18,  -123,  -123,  -123,  -123,  -123,  -123,   -27,   -29,   -31,
   -33,   -35,  -123,  -123,  -123,   -45,  -123,   -48,   -49,  -123,
  -123,   -85,   -87,  -123,   -62,   -65,  -123,  -123,   -69,   -79,
  -123,   -81,  -123,   -83,   -91,   -96,  -100,  -103,  -105,  -110,
  -112,  -117,  -123,  -120,  -121,  -122,   -17,   -19,  -123,  -123,
  -123,   -23,   -24,   -26,   -28,   -30,   -34,  -123,  -123,  -123,
   -40,   -42,   -43,   -44,   -46,   -47,   -51,  -106,   -86,  -123,
   -58,  -123,   -68,  -123,   -80,   -82,  -118,   -20,   -21,   -22,
  -123,   -37,  -123,   -39,   -41,   -88,   -67,   -70,   -36,   -38 ]

racc_goto_table = [
    67,    49,    96,    93,   111,   127,   100,    58,    87,     1,
    94,    68,     3,     2,    46,    80,    84,    99,    48,   106,
   109,   110,   159,   160,   114,   116,    54,    62,    65,    74,
   121,    81,    86,    57,    91,    95,   143,   nil,   nil,   nil,
   nil,   128,   nil,   nil,   nil,   nil,   nil,   138,   nil,   125,
   nil,   nil,   nil,   141,   nil,   130,    93,   136,   147,   139,
   nil,   nil,   171,   nil,   156,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   153,   nil,   nil,   nil,   nil,   nil,   157,   nil,   128,   nil,
   176,    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   182,   nil,   nil,   187 ]

racc_goto_check = [
    33,    17,    45,    49,    21,    35,    15,    28,    43,     1,
    47,    34,     3,     2,     3,    41,    41,    14,    16,    18,
    19,    20,    22,    23,    24,    25,    26,    30,    31,    36,
    37,    40,    44,    46,    48,    50,    51,   nil,   nil,   nil,
   nil,    33,   nil,   nil,   nil,   nil,   nil,    45,   nil,    34,
   nil,   nil,   nil,    45,   nil,    28,    49,    43,    15,    47,
   nil,   nil,    35,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    17,   nil,   nil,   nil,   nil,   nil,    17,   nil,    33,   nil,
    45,    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    17,   nil,   nil,    33 ]

racc_goto_pointer = [
   nil,     9,    13,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -30,   -41,     1,   -16,   -29,   -30,
   -29,   -46,   -91,   -90,   -27,   -27,     5,   nil,   -15,   nil,
     1,     2,   nil,   -28,   -18,   -64,    -1,   -29,   nil,   nil,
    -5,   -20,   nil,   -29,    -5,   -42,    12,   -32,    -7,   -38,
    -9,   -61 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     7,     8,     9,
    10,    11,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    20,    22,    71,    26,
   nil,   nil,    28,    29,   nil,   nil,    31,   nil,    34,    35,
   nil,   nil,    37,    38,   nil,   nil,    40,    41,   nil,    43,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 46, :_reduce_none,
  1, 46, :_reduce_none,
  1, 47, :_reduce_none,
  2, 47, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_13,
  1, 48, :_reduce_none,
  1, 48, :_reduce_none,
  1, 48, :_reduce_16,
  4, 57, :_reduce_none,
  1, 59, :_reduce_none,
  2, 59, :_reduce_none,
  3, 60, :_reduce_20,
  3, 60, :_reduce_21,
  3, 60, :_reduce_22,
  2, 60, :_reduce_none,
  4, 58, :_reduce_24,
  1, 61, :_reduce_25,
  3, 61, :_reduce_26,
  1, 63, :_reduce_none,
  2, 63, :_reduce_28,
  1, 63, :_reduce_none,
  2, 63, :_reduce_30,
  2, 62, :_reduce_31,
  0, 64, :_reduce_32,
  1, 64, :_reduce_33,
  2, 64, :_reduce_34,
  1, 64, :_reduce_35,
  4, 66, :_reduce_36,
  3, 66, :_reduce_37,
  4, 66, :_reduce_38,
  3, 65, :_reduce_39,
  1, 67, :_reduce_40,
  2, 67, :_reduce_41,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  4, 52, :_reduce_44,
  1, 69, :_reduce_45,
  2, 69, :_reduce_46,
  4, 53, :_reduce_47,
  1, 70, :_reduce_48,
  1, 70, :_reduce_49,
  2, 49, :_reduce_50,
  4, 49, :_reduce_51,
  1, 71, :_reduce_none,
  2, 71, :_reduce_53,
  1, 72, :_reduce_54,
  1, 72, :_reduce_55,
  2, 50, :_reduce_56,
  2, 51, :_reduce_57,
  4, 51, :_reduce_58,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 74, :_reduce_61,
  3, 74, :_reduce_62,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  3, 54, :_reduce_65,
  2, 54, :_reduce_66,
  5, 54, :_reduce_67,
  4, 54, :_reduce_68,
  1, 80, :_reduce_69,
  3, 80, :_reduce_70,
  1, 77, :_reduce_71,
  2, 77, :_reduce_72,
  1, 77, :_reduce_none,
  1, 81, :_reduce_74,
  1, 81, :_reduce_75,
  1, 81, :_reduce_76,
  1, 81, :_reduce_77,
  2, 81, :_reduce_78,
  2, 79, :_reduce_79,
  3, 79, :_reduce_80,
  2, 79, :_reduce_81,
  3, 79, :_reduce_82,
  2, 79, :_reduce_83,
  1, 79, :_reduce_84,
  2, 73, :_reduce_85,
  3, 73, :_reduce_86,
  1, 82, :_reduce_87,
  3, 82, :_reduce_88,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  3, 84, :_reduce_91,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  1, 86, :_reduce_none,
  1, 86, :_reduce_none,
  3, 83, :_reduce_96,
  2, 83, :_reduce_97,
  2, 56, :_reduce_98,
  1, 87, :_reduce_99,
  3, 87, :_reduce_100,
  2, 87, :_reduce_101,
  1, 89, :_reduce_none,
  2, 89, :_reduce_none,
  2, 88, :_reduce_104,
  3, 88, :_reduce_105,
  4, 55, :_reduce_106,
  2, 55, :_reduce_107,
  1, 91, :_reduce_108,
  2, 91, :_reduce_109,
  3, 91, :_reduce_110,
  1, 93, :_reduce_none,
  2, 93, :_reduce_none,
  1, 92, :_reduce_113,
  2, 92, :_reduce_114,
  2, 94, :_reduce_115,
  1, 95, :_reduce_116,
  2, 95, :_reduce_117,
  3, 95, :_reduce_118,
  1, 90, :_reduce_119,
  2, 90, :_reduce_120,
  1, 96, :_reduce_121,
  1, 96, :_reduce_122 ]

racc_reduce_n = 123

racc_shift_n = 190

racc_token_table = {
  false => 0,
  :error => 1,
  :BLANK => 2,
  :TEAMS => 3,
  :NEWLINE => 4,
  "---" => 5,
  :TEXT => 6,
  "--" => 7,
  "-" => 8,
  :PROP => 9,
  :PROP_END => 10,
  "," => 11,
  :PROP_NAME => 12,
  "(" => 13,
  :MINUTE => 14,
  ")" => 15,
  "[" => 16,
  "]" => 17,
  :YELLOW_CARD => 18,
  :RED_CARD => 19,
  :GROUP_DEF => 20,
  "|" => 21,
  :TEAM => 22,
  :ROUND_DEF => 23,
  :DATE => 24,
  :DURATION => 25,
  :DATETIME => 26,
  :GROUP => 27,
  "/" => 28,
  :ROUND => 29,
  :ORD => 30,
  :TIME => 31,
  :WDAY => 32,
  :STATUS => 33,
  :NOTE => 34,
  "@" => 35,
  :TIMEZONE => 36,
  :VS => 37,
  :SCORE => 38,
  :SCORE_MORE => 39,
  :PLAYER => 40,
  :NONE => 41,
  ";" => 42,
  :OG => 43,
  :PEN => 44 }

racc_nt_base = 45

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "BLANK",
  "TEAMS",
  "NEWLINE",
  "\"---\"",
  "TEXT",
  "\"--\"",
  "\"-\"",
  "PROP",
  "PROP_END",
  "\",\"",
  "PROP_NAME",
  "\"(\"",
  "MINUTE",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "YELLOW_CARD",
  "RED_CARD",
  "GROUP_DEF",
  "\"|\"",
  "TEAM",
  "ROUND_DEF",
  "DATE",
  "DURATION",
  "DATETIME",
  "GROUP",
  "\"/\"",
  "ROUND",
  "ORD",
  "TIME",
  "WDAY",
  "STATUS",
  "NOTE",
  "\"@\"",
  "TIMEZONE",
  "VS",
  "SCORE",
  "SCORE_MORE",
  "PLAYER",
  "NONE",
  "\";\"",
  "OG",
  "PEN",
  "$start",
  "document",
  "elements",
  "element",
  "date_header",
  "group_header",
  "round_header",
  "group_def",
  "round_def",
  "match_line",
  "goal_lines",
  "goal_lines_alt",
  "teams_list",
  "lineup_lines",
  "list",
  "list_item",
  "lineup",
  "lineup_name",
  "lineup_sep",
  "lineup_name_opts",
  "card",
  "lineup_sub",
  "card_body",
  "card_type",
  "team_values",
  "round_date_opts",
  "date_header_body",
  "date_header_date",
  "geo_opts",
  "round_values",
  "group_sep",
  "round_sep",
  "match_opts",
  "match",
  "more_match_opts",
  "more_matches",
  "date_opts",
  "geo_values",
  "match_result",
  "match_fixture",
  "match_sep",
  "score",
  "goals_alt",
  "goal_alt",
  "goal_alt_sep",
  "minute",
  "goal_lines_body",
  "goals",
  "goal_sep",
  "goal",
  "minutes",
  "minute_opts" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_13(val, _values, result)
     trace( "REDUCE BLANK" )
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_16(val, _values, result)
     puts "!! skipping invalid content (trying to recover from parse error):"
                pp val[0] 
                @errors << "parser error (recover) - skipping #{val[0].pretty_inspect}"

    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_20(val, _values, result)
      puts "level 3"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_21(val, _values, result)
      puts "level 2 #{val[1]}"
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_22(val, _values, result)
      puts "level 1 #{val[1]}"
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_24(val, _values, result)
      @tree << LineupLine.new( team:    val[0],
                                                    lineup:  val[1]
                                                  ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_25(val, _values, result)
     result = [[val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_26(val, _values, result)
                           ## if lineup_sep is -  start a new sub array!!
                       if val[1] == '-'
                          result << [val[2]]
                       else
                          result[-1] << val[2]
                       end

    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_28(val, _values, result)
     result = val[0]
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_30(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_31(val, _values, result)
                                  kwargs = { name: val[0] }.merge( val[1] )
                              result = Lineup.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_32(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_33(val, _values, result)
                                  result = { card: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_34(val, _values, result)
                                  result = { card: val[0], sub: val[1] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_35(val, _values, result)
                                  result = { sub: val[0] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_36(val, _values, result)
                                  result = Sub.new( sub:    val[1],
                                                minute: Minute.new(val[2][1]) 
                                              )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_37(val, _values, result)
                                  result = Sub.new( sub:    val[1] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_38(val, _values, result)
                                  result = Sub.new( sub:    val[2],
                                                minute: Minute.new(val[1][1]) 
                                              )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_39(val, _values, result)
                                  kwargs = val[1]
                              result = Card.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_40(val, _values, result)
     result = { name: val[0] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_41(val, _values, result)
     result = { name: val[0],
                                        minute: Minute.new(val[1][1]) } 

    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_44(val, _values, result)
                          @tree << GroupDef.new( name:  val[0],
                                             teams: val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_45(val, _values, result)
                                                   result = val
                                               ## e.g. val is ["Austria"] 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_46(val, _values, result)
                                                   result.push( val[1] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_47(val, _values, result)
                          kwargs = { name: val[0] }.merge( val[2] )
                      @tree<< RoundDef.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_48(val, _values, result)
     result = { date: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_49(val, _values, result)
     result = { duration: val[0][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_50(val, _values, result)
                         kwargs = {}.merge( val[0] )
                     @tree <<  DateHeader.new( **kwargs )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 188)
  def _reduce_51(val, _values, result)
                         kwargs = {}.merge( val[1] )
                     @tree <<  DateHeader.new( **kwargs )  

    result
  end
.,.,

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_53(val, _values, result)
      result = {}.merge( val[0], val[1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_54(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_55(val, _values, result)
       result = {}.merge( val[0][1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 205)
  def _reduce_56(val, _values, result)
                         @tree <<  GroupHeader.new( name: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_57(val, _values, result)
                         @tree <<  RoundHeader.new( names: val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_58(val, _values, result)
                        @tree <<  RoundHeader.new( names: val[0], group: val[2] )  

    result
  end
.,.,

# reduce 59 omitted

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_61(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 226)
  def _reduce_62(val, _values, result)
       result.push( val[2] )
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_65(val, _values, result)
                           kwargs = {}.merge( val[0], val[1], val[2] )
                       @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 241)
  def _reduce_66(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_67(val, _values, result)
                          kwargs = {}.merge( val[0], val[1] )
                      @tree << MatchLine.new( **kwargs )
                     
                      ## add more match fixtures
                      val[3].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_68(val, _values, result)
                          kwargs = val[0]
                      @tree << MatchLine.new( **kwargs )
 
                      ## add more match fixtures
                      val[2].each do |kwargs|
                         @tree << MatchLine.new( **kwargs)
                      end

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 273)
  def _reduce_69(val, _values, result)
                                        trace( "REDUCE => more_matches : match" ) 
                                    result = val

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_70(val, _values, result)
                                         trace( "REDUCE => more_matches : more_matches ',' match" ) 
                                     result.push( val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 284)
  def _reduce_71(val, _values, result)
       result = { ord: val[0][1][:value] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 285)
  def _reduce_72(val, _values, result)
       result = { ord: val[0][1][:value] }.merge( val[1] )
    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.y', 289)
  def _reduce_74(val, _values, result)
       result = { date: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_75(val, _values, result)
       result = {}.merge( val[0][1] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_76(val, _values, result)
       result = { time: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 292)
  def _reduce_77(val, _values, result)
       result = { wday: val[0][1]}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 293)
  def _reduce_78(val, _values, result)
       result = { wday: val[0][1], time: val[1][1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_79(val, _values, result)
                          ## todo - add possible status_notes too!!! 
                      result = { status: val[0][1][:status] }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 312)
  def _reduce_80(val, _values, result)
                         result = { status: val[0][1][:status] }.merge( val[1] ) 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_81(val, _values, result)
     result = {}.merge( val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 315)
  def _reduce_82(val, _values, result)
     result = {}.merge( val[0] )
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_83(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_84(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_85(val, _values, result)
     result = { geo: val[1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_86(val, _values, result)
     result = { geo: val[1], timezone: val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 327)
  def _reduce_87(val, _values, result)
      result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_88(val, _values, result)
      result.push( val[2] )
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_91(val, _values, result)
                                   trace( "RECUDE match_fixture" )
                               result = { team1: val[0],
                                          team2: val[2] }   

    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.y', 350)
  def _reduce_96(val, _values, result)
                               trace( "REDUCE => match_result : TEAM score TEAM" )
                           result = { team1: val[0],
                                      team2: val[2],
                                      score: val[1][1]
                                    }   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_97(val, _values, result)
                              trace( "REDUCE  => match_result : match_fixture score" )
                          result = { score: val[1][1] }.merge( val[0] )  

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_98(val, _values, result)
                                 @tree << GoalLineAlt.new( goals: val[0] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_99(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_100(val, _values, result)
     result.push( val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 391)
  def _reduce_101(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.y', 399)
  def _reduce_104(val, _values, result)
                               result = GoalAlt.new( score:   val[0],
                                                 player:  val[1] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 404)
  def _reduce_105(val, _values, result)
                               result = GoalAlt.new( score:  val[0],
                                                 player: val[1],
                                                 minute: val[2] )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 416)
  def _reduce_106(val, _values, result)
                           kwargs = val[1]
                       @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_107(val, _values, result)
                             kwargs = val[0]
                         @tree << GoalLine.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_108(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: [] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 429)
  def _reduce_109(val, _values, result)
      result = { goals1: [],
                                                              goals2: val[1] } 

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 432)
  def _reduce_110(val, _values, result)
      result = { goals1: val[0],
                                                              goals2: val[2] }

    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.y', 448)
  def _reduce_113(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 449)
  def _reduce_114(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 465)
  def _reduce_115(val, _values, result)
                      result = Goal.new( player:  val[0],
                                     minutes: val[1] )   

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 477)
  def _reduce_116(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 478)
  def _reduce_117(val, _values, result)
     result.push( val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 479)
  def _reduce_118(val, _values, result)
     result.push( val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 485)
  def _reduce_119(val, _values, result)
                            kwargs = {}.merge( val[0][1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 490)
  def _reduce_120(val, _values, result)
                            kwargs = { }.merge( val[0][1] ).merge( val[1] )
                        result = Minute.new( **kwargs )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 494)
  def _reduce_121(val, _values, result)
      result = { og: true }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 495)
  def _reduce_122(val, _values, result)
      result = { pen: true }
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RaccMatchParser
