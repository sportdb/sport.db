#!/usr/bin/env ruby

## tip: to test run:
##   ruby -I ./lib bin/fbt
##     -or-
##   ruby -I ../parser/lib -I ./lib bin/fbt
##     -or-
##   ruby -I ../parser/lib -I ../sportdb-structs/lib -I ./lib bin/fbt


## our own code
require 'sportdb/quick'



require 'optparse'

##
## read textfile
##   and dump tokens
##
##   fbt  ../openfootball/.../euro.txt




 args = ARGV
 opts = { debug: false,
          metal: false,
          quick: false }

 parser = OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options]"

##
## check if git has a offline option?? (use same)
##             check for other tools - why? why not?


  parser.on( "--verbose", "--debug",
               "turn on verbose / debug output (default: #{opts[:debug]})" ) do |debug|
    opts[:debug] = debug
  end

  parser.on( "--metal",
                 "turn off typed parse tree; show to the metal tokens"+
                   " (default: #{opts[:metal]})" ) do |metal|
    opts[:metal] = metal
  end

  parser.on( "--quick",
                "use quick match reader; output matches in json"+
                   " (default: #{opts[:quick]})" ) do |quick|
     opts[:quick] = quick
  end
end
parser.parse!( args )

puts "OPTS:"
p opts
puts "ARGV:"
p args





paths =  if args.empty?
            [
              '../../../openfootball/euro/2021--europe/euro.txt',
              '../../../openfootball/euro/2024--germany/euro.txt',
            ]
         else
            ## check for directories
            ##   and auto-expand

            SportDb::Quick::Opts.expand_args( args )
         end


if opts[:quick]

  paths.each_with_index do |path,i|
    puts "==> [#{i+1}/#{paths.size}] reading >#{path}<..."

    matches = SportDb::QuickMatchReader.read( path )
    ## pp matches
    ##  try json for matches
    data = matches.map {|match| match.as_json }
    pp data
    puts
    puts "  #{data.size} match(es)"
  end
else
  SportDb::Quick::Linter.debug = true    if opts[:debug]

  linter = SportDb::Quick::Linter.new

  errors = []

  paths.each_with_index do |path,i|
    puts "==> [#{i+1}/#{paths.size}] reading >#{path}<..."
    linter.read( path, parse: !opts[:metal] )

    errors += linter.errors    if linter.errors?
  end

  if errors.size > 0
    puts
    pp errors
    puts
    puts "!!   #{errors.size} parse error(s) in #{paths.size} datafiles(s)"
  else
    puts
    puts "OK   no parse errors found in #{paths.size} datafile(s)"
  end
end


puts "bye"

